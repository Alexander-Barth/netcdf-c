set breakpoint pending on

break test_write.c:740 if i == 6

#-------------
break test_nc_put_var1
commands
break util.c:968
commands
print ((signed char*)((ncio_px*)nc3->nciop->pvt)->bf_base + 9816)[0]
end
break util.c:970 if i == 6 && j == 0 && expect == -128
break util.c:974
break putget.c:10414
commands
print ((signed char*)((ncio_px*)nc3->nciop->pvt)->bf_base + 9816)[0]
end

end
#------------------

####
# No. We know the problem is in reading, not writing.
####

#break test_put.c:3330 if var_name[i][0] == 'c' && var_name[i][1] == 'r' && var_name[i][2] == '\0'
#break test_write.c:737 if var_name[i][0] == 'c' && var_name[i][1] == 'r' && var_name[i][2] == '\0'


#break util.c:960 if i == 6 && j == 0
#commands
#break nc_get_var_text
#break ncio_get
#commands
#break posixio.c:691
#commands
#print diff
#print ((char*)pxp->bf_base + diff)[0]
#print ((signed char*)pxp->bf_base + diff)[0]
#end

#end

#continue
#end

#break util.c:963 if text != expect && i == 6 && j == 0
#break util.c:964

###

#break test_get.c:8340 if i == -1 && j == 0
#break util.c:1035 if i == -1 && j == 0
#break util.c:1040

####

#break cdf5_gh159_test.c:52
#commands
#continue
#end
#break cdf5_gh159_test.c:145
#commands
#break ncx_putn_uchar_double
#break ncx.c:4845
#commands
#print ((uchar *)*xpp)[0]
#print ((uchar *)*xpp)[1]
#print ((uchar *)*xpp)[2]
#end
#end
